-- ====================================================================================================================
-- [POPULANDO TABELAS]

-- POPULANDO TABELA TL_CURSO

CREATE TABLE TL_CURSO (
  ID_CURSO NUMBER(10) PRIMARY KEY,
  NM_CURSO VARCHAR2(80),
  DS_DURACAO VARCHAR2(20)
);

-- Código para popular a tabela TL_CURSO com 5 cursos da área de programação, atualizando os registros caso já existam
BEGIN
  MERGE INTO TL_CURSO t
  USING (
    SELECT 1 AS ID_CURSO, 'Introdução à programação' AS NM_CURSO, 80 AS DS_DURACAO FROM DUAL UNION ALL
    SELECT 2 AS ID_CURSO, 'Lógica de programação' AS NM_CURSO, 120 AS DS_DURACAO FROM DUAL UNION ALL
    SELECT 3 AS ID_CURSO, 'Java para iniciantes' AS NM_CURSO, 1440 AS DS_DURACAO FROM DUAL UNION ALL
    SELECT 4 AS ID_CURSO, 'Python avançado' AS NM_CURSO, 960 AS DS_DURACAO FROM DUAL UNION ALL
    SELECT 5 AS ID_CURSO, 'Desenvolvimento web com HTML, CSS e JavaScript' AS NM_CURSO, 1200 AS DS_DURACAO FROM DUAL
  ) s
  ON (t.ID_CURSO = s.ID_CURSO)
  WHEN MATCHED THEN
    UPDATE SET t.NM_CURSO = s.NM_CURSO, t.DS_DURACAO = s.DS_DURACAO
  WHEN NOT MATCHED THEN
    INSERT (ID_CURSO, NM_CURSO, DS_DURACAO) VALUES (s.ID_CURSO, s.NM_CURSO, s.DS_DURACAO);
  
  COMMIT;
END;

-- POPULANDO TABELA TL_PLANO

CREATE TABLE TL_PLANO (
  ID_PLANO NUMBER(10) PRIMARY KEY,
  NM_PLANO VARCHAR2(80),
  VL_PLANO NUMBER(18,2)
);

-- Código para popular a tabela TL_PLANO com 3 planos de serviço, atualizando os registros caso já existam
BEGIN
  MERGE INTO TL_PLANO t
  USING (
    SELECT 1 AS ID_PLANO, 'gratuito' AS NM_PLANO, 0 AS VL_PLANO FROM DUAL UNION ALL
    SELECT 2 AS ID_PLANO, 'premium' AS NM_PLANO, 100 AS VL_PLANO FROM DUAL UNION ALL
    SELECT 3 AS ID_PLANO, 'TOP' AS NM_PLANO, 200 AS VL_PLANO FROM DUAL
  ) s
  ON (t.ID_PLANO = s.ID_PLANO)
  WHEN MATCHED THEN
    UPDATE SET t.NM_PLANO = s.NM_PLANO, t.VL_PLANO = s.VL_PLANO
  WHEN NOT MATCHED THEN
    INSERT (ID_PLANO, NM_PLANO, VL_PLANO) VALUES (s.ID_PLANO, s.NM_PLANO, s.VL_PLANO);
  
  COMMIT;
END;


-- POPULANDO TABELA TL_ALUNO

CREATE TABLE TL_ALUNO (
  ID_ALUNO NUMBER(10,0) NOT NULL,
  NM_ALUNO NVARCHAR2(80) NOT NULL,
  NR_CPF NVARCHAR2(14) NOT NULL,
  DS_EMAIL NVARCHAR2(80) NOT NULL,
  DT_NASCIMENTO TIMESTAMP(7) NOT NULL,
  FK_ID_PLANO NUMBER(10,0) NOT NULL,
  DS_SENHA NVARCHAR2(30) NOT NULL,
  CONSTRAINT PK_ALUNO PRIMARY KEY (ID_ALUNO),
  CONSTRAINT FK_PLANO FOREIGN KEY (FK_ID_PLANO)
    REFERENCES TL_PLANO (ID_PLANO)
);
-- Código para popular a tabela TL_ALUNO com até 5 alunos, atualizando os registros caso já existam
BEGIN
  MERGE INTO TL_ALUNO t
  USING (
    SELECT 1 AS ID_ALUNO, 'João Silva' AS NM_ALUNO, '111.111.111-11' AS NR_CPF, 'joao.silva@exemplo.com' AS DS_EMAIL, TO_TIMESTAMP('1990-05-12 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS DT_NASCIMENTO, 1 AS FK_ID_PLANO, '123' AS DS_SENHA FROM DUAL UNION ALL
    SELECT 2 AS ID_ALUNO, 'Maria Souza' AS NM_ALUNO, '222.222.222-22' AS NR_CPF, 'maria.souza@exemplo.com' AS DS_EMAIL, TO_TIMESTAMP('1995-08-20 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS DT_NASCIMENTO, 1 AS FK_ID_PLANO, '123' AS DS_SENHA FROM DUAL UNION ALL
    SELECT 3 AS ID_ALUNO, 'Pedro Santos' AS NM_ALUNO, '333.333.333-33' AS NR_CPF, 'pedro.santos@exemplo.com' AS DS_EMAIL, TO_TIMESTAMP('1998-03-05 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS DT_NASCIMENTO, 1 AS FK_ID_PLANO, '123' AS DS_SENHA FROM DUAL UNION ALL
    SELECT 4 AS ID_ALUNO, 'Lucas Oliveira' AS NM_ALUNO, '444.444.444-44' AS NR_CPF, 'lucas.oliveira@exemplo.com' AS DS_EMAIL, TO_TIMESTAMP('1993-11-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS DT_NASCIMENTO, 1 AS FK_ID_PLANO, '123' AS DS_SENHA FROM DUAL UNION ALL
    SELECT 5 AS ID_ALUNO, 'Fernanda Costa' AS NM_ALUNO, '555.555.555-55' AS NR_CPF, 'fernanda.costa@exemplo.com' AS DS_EMAIL, TO_TIMESTAMP('2000-02-28 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AS DT_NASCIMENTO, 1 AS FK_ID_PLANO, '123' AS DS_SENHA FROM DUAL
  ) s
  ON (t.ID_ALUNO = s.ID_ALUNO)
  WHEN MATCHED THEN
    UPDATE SET t.NM_ALUNO = s.NM_ALUNO, t.NR_CPF = s.NR_CPF, t.DS_EMAIL = s.DS_EMAIL, t.DT_NASCIMENTO = s.DT_NASCIMENTO, t.FK_ID_PLANO = s.FK_ID_PLANO, t.DS_SENHA = s.DS_SENHA
  WHEN NOT MATCHED THEN
    INSERT (ID_ALUNO, NM_ALUNO, NR_CPF, DS_EMAIL, DT_NASCIMENTO, FK_ID_PLANO, DS_SENHA) VALUES (s.ID_ALUNO, s.NM_ALUNO, s.NR_CPF, s.DS_EMAIL, s.DT_NASCIMENTO, s.FK_ID_PLANO, s.DS_SENHA);
    
    COMMIT;
END;


-- POPULANDO TABELA TL_ALUNO_CURSO

CREATE TABLE TL_ALUNO_CURSO (
    ID_ALUNO NUMBER(10,0) NOT NULL,
    ID_CURSO NUMBER(10,0) NOT NULL,
    NR_NOTA NUMBER(10,0),
    ST_STATUS NVARCHAR2(20),
    DT_CONCLUSAO TIMESTAMP(7),
    CONSTRAINT FK_ALUNO_CURSO_ALUNO FOREIGN KEY (ID_ALUNO) REFERENCES TL_ALUNO(ID_ALUNO),
    CONSTRAINT FK_ALUNO_CURSO_CURSO FOREIGN KEY (ID_CURSO) REFERENCES TL_CURSO(ID_CURSO)
);

-- Populando a tabela com 5 registros
MERGE INTO TL_ALUNO_CURSO
USING (
  SELECT 1 AS ID_ALUNO, 1 AS ID_CURSO, 90 AS NR_NOTA, 'APROVADO' AS ST_STATUS, TO_TIMESTAMP('2023-05-14 10:00:00','YYYY-MM-DD HH24:MI:SS') AS DT_CONCLUSAO FROM DUAL UNION ALL
  SELECT 1 AS ID_ALUNO, 2 AS ID_CURSO, 80 AS NR_NOTA, 'APROVADO' AS ST_STATUS, TO_TIMESTAMP('2023-05-13 10:00:00','YYYY-MM-DD HH24:MI:SS') AS DT_CONCLUSAO FROM DUAL UNION ALL
  SELECT 2 AS ID_ALUNO, 1 AS ID_CURSO, 70 AS NR_NOTA, 'REPROVADO' AS ST_STATUS, TO_TIMESTAMP('2023-05-12 10:00:00','YYYY-MM-DD HH24:MI:SS') AS DT_CONCLUSAO FROM DUAL UNION ALL
  SELECT 2 AS ID_ALUNO, 2 AS ID_CURSO, 100 AS NR_NOTA, 'APROVADO' AS ST_STATUS, TO_TIMESTAMP('2023-05-11 10:00:00','YYYY-MM-DD HH24:MI:SS') AS DT_CONCLUSAO FROM DUAL UNION ALL
  SELECT 3 AS ID_ALUNO, 1 AS ID_CURSO, 60 AS NR_NOTA, 'REPROVADO' AS ST_STATUS, TO_TIMESTAMP('2023-05-10 10:00:00','YYYY-MM-DD HH24:MI:SS') AS DT_CONCLUSAO FROM DUAL
) DADOS
ON (TL_ALUNO_CURSO.ID_ALUNO = DADOS.ID_ALUNO AND TL_ALUNO_CURSO.ID_CURSO = DADOS.ID_CURSO)
WHEN MATCHED THEN UPDATE SET NR_NOTA = DADOS.NR_NOTA, ST_STATUS = DADOS.ST_STATUS, DT_CONCLUSAO = DADOS.DT_CONCLUSAO
WHEN NOT MATCHED THEN INSERT (ID_ALUNO, ID_CURSO, NR_NOTA, ST_STATUS, DT_CONCLUSAO) VALUES (DADOS.ID_ALUNO, DADOS.ID_CURSO, DADOS.NR_NOTA, DADOS.ST_STATUS, DADOS.DT_CONCLUSAO);
  COMMIT;
END;






-- ====================================================================================================================
-- [Geração de relatório de desempenho]





-- ====================================================================================================================
-- [Geração de certificados]
-- geração de certificado de todos os que concluiram
DECLARE
  v_aluno_nome TL_ALUNO.NM_ALUNO%TYPE;
  v_curso_nome TL_CURSO.NM_CURSO%TYPE;
  v_curso_duracao TL_CURSO.DS_DURACAO%TYPE;
  v_conclusao TL_ALUNO_CURSO.DT_CONCLUSAO%TYPE;
BEGIN
  FOR rec IN (SELECT ac.ID_ALUNO, a.NM_ALUNO, ac.ID_CURSO, c.NM_CURSO, c.DS_DURACAO, ac.DT_CONCLUSAO
              FROM TL_ALUNO_CURSO ac
              JOIN TL_ALUNO a ON ac.ID_ALUNO = a.ID_ALUNO
              JOIN TL_CURSO c ON ac.ID_CURSO = c.ID_CURSO
              WHERE ac.ST_STATUS = 'APROVADO')             
  LOOP
    v_aluno_nome := rec.NM_ALUNO;
    v_curso_nome := rec.NM_CURSO;
    v_curso_duracao := rec.DS_DURACAO;
    v_conclusao := rec.DT_CONCLUSAO;
    
    -- Aqui entra o código de geração do certificado, utilizando as variáveis acima
      -- Imprimir o certificado
      DBMS_OUTPUT.PUT_LINE('');
      DBMS_OUTPUT.PUT_LINE('CERTIFICADO');
      DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
      DBMS_OUTPUT.PUT_LINE('Certificamos que ' || v_aluno_nome || ' concluiu o curso ' || v_curso_nome);
      DBMS_OUTPUT.PUT_LINE('com duração de ' || v_curso_duracao || ', em ' || TO_CHAR(v_conclusao, 'DD/MM/YYYY'));
    
  END LOOP;
END;




-- ====================================================================================================================
-- [Atribuição de planos de assinatura]
-- Adiciona automaticamente o plano 1, o plano gratuito quando o aluno é criado
create or replace TRIGGER trg_alteracao_plano_aluno
AFTER UPDATE ON TL_ALUNO
FOR EACH ROW
DECLARE
  vl_id_curso INTEGER;
  vl_contador INTEGER;
  velha_fk_id_plano INTEGER;
  nova_fk_id_plano INTEGER;
  nova_id_aluno INTEGER;
BEGIN
    velha_fk_id_plano := :old.FK_ID_PLANO;
    nova_fk_id_plano := :new.FK_ID_PLANO;
    nova_id_aluno := :old.ID_ALUNO;
    
    SELECT COUNT(*) INTO vl_contador FROM tl_aluno_curso WHERE id_aluno = nova_id_aluno;
    
    IF vl_contador = 0 THEN
        IF velha_fk_id_plano = 1 and nova_fk_id_plano != 1 THEN
            SELECT id_curso
            INTO vl_id_curso
            FROM TL_CURSO
            ORDER BY DBMS_RANDOM.value
            FETCH FIRST 1 ROW ONLY;
    
            INSERT INTO TL_ALUNO_CURSO (id_aluno, id_curso, nr_nota)
            VALUES (nova_id_aluno, vl_id_curso, 0);
        END IF;
    END IF;
END;